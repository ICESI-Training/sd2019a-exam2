#
- hosts: manager
  user: ansible
  become: true
  become_method: sudo
  tasks:
   - name: "Installing Docker Prerequisite packages"
     yum:
        name: "{{ item }}"
        state: latest
     with_items:
         - yum-utils
         - device-mapper-persistent-data
         - lvm2
   - name: "Configuring docker-ce repo"
     get_url:
         url: https://download.docker.com/linux/centos/docker-ce.repo
         dest: /etc/yum.repos.d/docker-ce.repo
         mode: 0644
   - name: " Installing Docker latest version"
     yum:
       name: docker-ce
       state: present
   - name: " Starting and Enabling Docker service"
     service:
       name: docker
       state: started
       enabled: yes
   - name: "Installing repo de Gluster"
     yum:
       name: centos-release-gluster
       state: present
   - name: "Installing GlusterFs"
     yum:
        name: glusterfs-server
        state: present
   - name: "instalando xfs"
     yum:
       name: xfsprogs
       state: present
   - name: "start firewalld"
     service:
        name: firewalld
        state: started
        enabled: yes
   - name: "Deshabilitando firewall"
     firewalld:
       port: 0-6500/tcp
       permanent: yes
       state: enabled
   - name: "Deshabilitando firewall udp"
     firewalld:
       port: 0-6500/udp
       permanent: yes
       state: enabled   
   - name: "Make sure gluterfs is running"
     service:
        name: glusterd
        state: started
        enabled: yes
   - name: "creando particion"
     parted:
         device: /dev/sdb
         number: 1
         state: present
   - name: "Creando filesystem"
     filesystem:
         fstype: xfs
         dev: /dev/sdb1
   - name: "Asegurando la existencia de directorios"
     file: 
       path: "{{ item }}"
       state: directory
       force: yes
     with_items:
        - "/gluster/data"
        - "/swarm/volumes"
   - name: "Montando discos"
     mount:
        name: /gluster/data
        src: /dev/sdb1
        fstype: xfs
        state: mounted

    # Gluster volume configuration.
 #  - name: Check if Gluster volumes already exist.
 #    shell: "gluster volume info"
 #    changed_when: false
 #    register: gluster_volume_info
 #  - name: "Conectar peer"
 #    shell: "gluster peer probe {{ item }}"
 #    register: gluster_peer_probe
 #    changed_when: "'already in peer list' not in gluster_peer_probe.stdout"
 #    failed_when: false
 #    with_items:
 #       - "worker01"
 #       - "worker02"
 #       - "worker03"
 #    when: "'Volume name: gluster' not in gluster_volume_info.stdout"
 #  - name: "Crear volumen"
 #    shell: "sudo gluster volume create swarm-vols replica 4 manager:/gluster/data worker01:/gluster/data worker02:/gluster/data worker03:/gluster/data force"
 #    register: gluster_volume_create
 #    changed_when: "'successful' in gluster_volume_create.stdout"
 #    when: "inventory_hostname == 'worker01' and 'Volume Name: gluster' not in gluster_volume_info.stdout"
 #  - name: "Set volume"
 #    shell: "sudo gluster volume set gluster auth.allow 127.0.0.1"
 #  - name: Ensure Gluster volume is started.
 #    shell: "gluster volume start swarm-vols"
 #   register: gluster_volume_start
 #    changed_when: "'successful' in gluster_volume_start.stdout"
 #    when: "inventory_hostname == manager and 'Volume Name: gluster' not in gluster_volume_info.stdout"

  # - name: "Montando gluster"
   #  shell: "sudo mount.glusterfs localhost:/swarm-vols /swarm/volumes"
   - name: instalando repo pip
     yum:
      name: epel-release
      state: latest 
   - name: instalando python-pip
     yum:
       name: python-pip
       state: latest
   - name: instalan modulo python docker
     pip:
       name: docker
  # - name: determine swarm status
 #     shell: >
 #       docker info | egrep '^Swarm: ' | cut -d ' ' -f2
 #     register: swarm_status

#    - name: create swarm_manager_operational group
#      add_host:
#        hostname: "{{ item }}"
#        groups: swarm_manager_operational
#      with_items: "{{ play_hosts }}"
#      when: "'active' in swarm_status.stdout_lines"
#      run_once: true

#    - name: create swarm_manager_bootstrap group
#      add_host:
#        hostname: "{{ item }}"
#        groups: swarm_manager_bootstrap
#      with_items: "{{ play_hosts }}"
#      when: "'active' not in swarm_status.stdout_lines"
 #     run_once: true


   - name: Iniciar cluster docker swarm 
     docker_swarm:
      state: present 
      advertise_addr: 10.0.0.1
     register: token_prueba

   - name: Test hosts list
     debug:
       msg: "{{ token_prueba.swarm_facts.JoinTokens.Worker }}"

   - name: Add host with TOken
     add_host:
         name: host_token
         token: " {{ token_prueba.swarm_facts.JoinTokens.Worker }}"

   - name: test 2
     debug:
       msg: " {{hostvars.host_token.token}} "
#   - name: "get docker swarm worker token"
#     shell: docker swarm join-token -q worker
#     register: worker_token

